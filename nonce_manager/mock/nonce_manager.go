// Code generated by MockGen. DO NOT EDIT.
// Source: nonce_manager/nonce_manager.go
//
// Generated by this command:
//
//	mockgen -source=nonce_manager/nonce_manager.go
//
// Package mock_nonce_manager is a generated GoMock package.
package mock_nonce_manager

import (
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockNonceService is a mock of NonceService interface.
type MockNonceService struct {
	ctrl     *gomock.Controller
	recorder *MockNonceServiceMockRecorder
}

// MockNonceServiceMockRecorder is the mock recorder for MockNonceService.
type MockNonceServiceMockRecorder struct {
	mock *MockNonceService
}

// NewMockNonceService creates a new mock instance.
func NewMockNonceService(ctrl *gomock.Controller) *MockNonceService {
	mock := &MockNonceService{ctrl: ctrl}
	mock.recorder = &MockNonceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonceService) EXPECT() *MockNonceServiceMockRecorder {
	return m.recorder
}

// GetCurrentNonce mocks base method.
func (m *MockNonceService) GetCurrentNonce(addr common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentNonce", addr)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentNonce indicates an expected call of GetCurrentNonce.
func (mr *MockNonceServiceMockRecorder) GetCurrentNonce(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentNonce", reflect.TypeOf((*MockNonceService)(nil).GetCurrentNonce), addr)
}

// GetCurrentNonceFromNetwork mocks base method.
func (m *MockNonceService) GetCurrentNonceFromNetwork(addr common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentNonceFromNetwork", addr)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentNonceFromNetwork indicates an expected call of GetCurrentNonceFromNetwork.
func (mr *MockNonceServiceMockRecorder) GetCurrentNonceFromNetwork(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentNonceFromNetwork", reflect.TypeOf((*MockNonceService)(nil).GetCurrentNonceFromNetwork), addr)
}

// Init mocks base method.
func (m *MockNonceService) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockNonceServiceMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockNonceService)(nil).Init), a)
}

// Name mocks base method.
func (m *MockNonceService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNonceServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNonceService)(nil).Name))
}

// SaveNonce mocks base method.
func (m *MockNonceService) SaveNonce(addr common.Address, newValue uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNonce", addr, newValue)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNonce indicates an expected call of SaveNonce.
func (mr *MockNonceServiceMockRecorder) SaveNonce(addr, newValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNonce", reflect.TypeOf((*MockNonceService)(nil).SaveNonce), addr, newValue)
}
